[
  {
    "tablename": "users",
    "policyname": "Alternative JWT approach",
    "cmd": "ALL",
    "qual": "(((id)::text = ( SELECT (auth.jwt() ->> 'sub'::text) AS text)) OR (role = 'admin'::user_role))",
    "with_check": null
  },
  {
    "tablename": "users",
    "policyname": "Only admins can delete users",
    "cmd": "DELETE",
    "qual": "((role = 'admin'::user_role) AND ( SELECT (EXISTS ( SELECT 1\n           FROM users users_1\n          WHERE ((users_1.role = 'admin'::user_role) AND ((users_1.id)::text = ( SELECT (auth.uid())::text AS uid))))) AS \"exists\"))",
    "with_check": null
  },
  {
    "tablename": "users",
    "policyname": "Only admins can insert users",
    "cmd": "INSERT",
    "qual": null,
    "with_check": "( SELECT (EXISTS ( SELECT 1\n           FROM users users_1\n          WHERE ((users_1.role = 'admin'::user_role) AND ((users_1.id)::text = ( SELECT (auth.uid())::text AS uid))))) AS \"exists\")"
  },
  {
    "tablename": "users",
    "policyname": "Users can update own data",
    "cmd": "UPDATE",
    "qual": "((( SELECT (users_1.id)::text AS id\n   FROM users users_1\n  WHERE ((users_1.id)::text = ( SELECT (auth.uid())::text AS uid))\n LIMIT 1))::integer = id)",
    "with_check": "((( SELECT (users_1.id)::text AS id\n   FROM users users_1\n  WHERE ((users_1.id)::text = ( SELECT (auth.uid())::text AS uid))\n LIMIT 1))::integer = id)"
  },
  {
    "tablename": "users",
    "policyname": "Users can view own data",
    "cmd": "SELECT",
    "qual": "(((( SELECT (users_1.id)::text AS id\n   FROM users users_1\n  WHERE ((users_1.id)::text = ( SELECT (auth.uid())::text AS uid))\n LIMIT 1))::integer = id) OR (role = 'admin'::user_role))",
    "with_check": null
  },
  {
    "tablename": "approvals",
    "policyname": "Users can view own approvals",
    "cmd": "SELECT",
    "qual": "((requester_id = ( SELECT users.id\n   FROM users\n  WHERE ((users.id)::text = ( SELECT (auth.uid())::text AS uid))\n LIMIT 1)) OR (admin_id = ( SELECT users.id\n   FROM users\n  WHERE ((users.id)::text = ( SELECT (auth.uid())::text AS uid))\n LIMIT 1)) OR (( SELECT users.role\n   FROM users\n  WHERE ((users.id)::text = ( SELECT (auth.uid())::text AS uid))\n LIMIT 1) = 'admin'::user_role))",
    "with_check": null
  }
]
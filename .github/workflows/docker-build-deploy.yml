name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Restore Docker layer cache
        uses: actions/cache@v3
        id: docker-cache
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ github.ref_name }}-
            buildx-cache-

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ambp:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          no-cache: false

      - name: Move cache for future builds
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Complete DockerHub cleanup
        run: |
          echo "Starting complete DockerHub cleanup..."
          
          # Get all tags with pagination
          PAGE=1
          ALL_TAGS=""
          
          while true; do
            RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" \
              "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/ambp/tags/?page=$PAGE&page_size=100")
            
            if ! echo "$RESPONSE" | jq -e '.results' > /dev/null 2>&1; then
              break
            fi
            
            TAGS=$(echo "$RESPONSE" | jq -r '.results[] | select(.name != "latest") | .name')
            ALL_TAGS="$ALL_TAGS $TAGS"
            
            # Check if there's a next page
            NEXT=$(echo "$RESPONSE" | jq -r '.next // empty')
            if [ -z "$NEXT" ]; then
              break
            fi
            
            PAGE=$((PAGE + 1))
          done
          
          # Clean up whitespace and count tags
          ALL_TAGS=$(echo $ALL_TAGS | xargs)
          TAG_COUNT=$(echo $ALL_TAGS | wc -w)
          
          if [ "$TAG_COUNT" -eq 0 ]; then
            echo "✓ No tags to delete (only 'latest' found)"
          else
            echo "Found $TAG_COUNT tags to delete"
            
            # Delete all tags
            DELETED=0
            for TAG in $ALL_TAGS; do
              echo "Deleting: $TAG"
              
              STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
                -H "Authorization: Bearer ${{ secrets.DOCKERHUB_TOKEN }}" \
                "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/ambp/tags/$TAG/")
              
              if [ "$STATUS" = "204" ]; then
                DELETED=$((DELETED + 1))
              else
                echo "  ✗ Failed (Status: $STATUS)"
              fi
            done
            
            echo "✓ Deleted: $DELETED/$TAG_COUNT tags"
          fi
          
          echo "✓ Complete cleanup finished - only 'latest' remains"
          echo "✓ Cache cleared automatically"

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}